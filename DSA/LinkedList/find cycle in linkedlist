
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* slow=head;
        ListNode* fast= head;
        while(fast!=NULL && fast->next!=NULL){   // for odd and even length respectively
            slow=slow->next;
            fast= fast->next->next;
         
            if(slow==fast) return true;
               
        }
        
                return false;
            
           
        }
        
    
};

// linkedlist cycle ||

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* slow =head;
        ListNode* fast =head;
        bool flag =false;//no cycle 
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast){
                flag=true;
                break;
        }
    }
    if(flag== false) return NULL;
    else{
        ListNode*temp=head;
        while(temp!=slow){
            slow=slow->next;
            temp=temp->next;
        }
        return temp;
    }
    }
};
