#include<iostream>
using namespace std;
class Node{
    public:
    int val;
    Node* next;
    Node(int val){
        this->val= val;
       this->next = NULL;
    }
};
    class linkedlist{
        public:
        void getdata(Node*&head){
            Node*temp=head;
            while(temp!=NULL){
                cout<<temp->val<<" ";
                temp=temp->next;
            }
            cout<<endl;
        }
   void getmid(Node* head) {
    Node* temp = head; 
    int n = 0;
    while(temp != NULL){
        n++;
        temp = temp->next;
    }
    int mid = n / 2;
    temp = head;
    for(int i = 0; i < mid; i++) {
        temp = temp->next;
    }
    cout << "Middle node value: " << temp->val << endl;
}
    };
int main (){
    linkedlist l;

    Node*a = new Node(10);
    Node*b = new Node(20);
    Node*c = new Node(30);
    Node*d = new Node(40);
    Node*e = new Node(50);
    Node*f = new Node(60);

    a->next = b;
    b->next = c;
    c->next = d;
    d->next = e;
    e->next = f;
    f->next=NULL;
    
   
    l.getdata(a);
    l.getmid(a);
}



//    best case solution 

// using two pointers 
// class Solution {
// public:
//     ListNode* middleNode(ListNode* head) {
//         ListNode* slow = head;
//         ListNode* fast = head;
//         while( fast!=NULL && fast->next!=0) {
//             slow=slow->next;
//             fast=fast->next->next;
//         }
//         return slow;  9

//     }
//     };
